package kg.apc.jmeter.dcerpc;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.jmeter.protocol.tcp.sampler.BinaryTCPClientImpl;
import org.apache.jorphan.util.JOrphanUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author apc
 */
public class RPCPacketTest
{
   class RPCRequestImpl
         extends RPCPacket
   {
      public byte[] getHeaderBytes()
      {
         byte[] res =
         {
            1,
            2,
            3
         };
         return res;
      }

      public byte[] getBodyBytes()
      {
         byte[] res =
         {
            4,
            5,
            6
         };
         return res;
      }
   }

   /**
    *
    */
   public RPCPacketTest()
   {
   }

   /**
    *
    * @throws Exception
    */
   @BeforeClass
   public static void setUpClass()
         throws Exception
   {
   }

   /**
    *
    * @throws Exception
    */
   @AfterClass
   public static void tearDownClass()
         throws Exception
   {
   }

   /**
    *
    */
   @Before
   public void setUp()
   {
   }

   /**
    *
    */
   @After
   public void tearDown()
   {
   }

   /**
    *
    */
   @Test
   public void testGetCommonHeaderBytes()
   {
      System.out.println("getCommonHeaderBytes");
      RPCPacket instance = new RPCRequestImpl();
      String expResult = "0500ff03100000000000000001000000";
      String result = JOrphanUtils.baToHexString(instance.getCommonHeaderBytes());
      assertEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testGetBytes()
   {
      System.out.println("getBytes");
      RPCPacket instance = new RPCRequestImpl();
      String expResult = "0500ff03100000001600000001000000010203040506";
      String result = JOrphanUtils.baToHexString(instance.getBytes());
      assertEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testGetHeaderBytes()
   {
      System.out.println("getHeaderBytes");
      RPCPacket instance = new RPCRequestImpl();
      String expResult = "010203";
      String result = JOrphanUtils.baToHexString(instance.getHeaderBytes());
      assertEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testGetBodyBytes()
   {
      System.out.println("getBodyBytes");
      RPCPacket instance = new RPCRequestImpl();
      String expResult = "040506";
      String result = JOrphanUtils.baToHexString(instance.getBodyBytes());
      assertEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testFragLenFromRPCHeader()
   {
      System.out.println("fragLenFromRPCHeader1");
      byte[] buffer = BinaryTCPClientImpl.hexStringToByteArray("050000031000000018000000030000000000000000000000");
      short expResult = 24;
      short result = RPCPacket.fragLenFromRPCHeader(buffer);
      assertEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testFragLenFromRPCHeader_2()
   {
      System.out.println("fragLenFromRPCHeader2");
      byte[] buffer = BinaryTCPClientImpl.hexStringToByteArray("0500020110000000D0160000040000009421000000000000000000008f0000006d7376637237312e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000006e6500500500ac1e563e6d7376637037312e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000203100a00700bbee773e61746c38302e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000006e67006e010075b3e2456d737663723830642e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000746500e011004ea433436d737663703830642e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000747200b00f00d7a433434d6963726f736f66742e564338302e44656275674352542e6d616e6966657374000000000000000000000000000000000000746555070000bdc0a27a55706461746533322e65786500000000000000000000000000000000000000000000000000000000000000000000000000006f6e0040070042b21c4b5265676973746572436f6d2e6578650000000000000000000000000000000000000000000000000000000000000000000000696e00b0000030b31c4b556e626c6f636b436172642e65786500000000000000000000000000000000000000000000000000000000000000000000003b20005008003fb21c4b436c656172696e6733322e6578650000000000000000000000000000000000000000000000000000000000000000000000003d2000f0000080b31c4b634254616233322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000642000b0040092b21c4b6348656c7033322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000726900d000007fb21c4b634d656e7533322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000d0a00d000009ab21c4b635075626c696333322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000576100000a0068b21c4b614d61727368616c33322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000020280000010054b21c4b6352737a526573697a652e646c6c000000000000000000000000000000000000000000000000000000000000000000000000726f00f000007fb21c4b6352656d6f746541636333322e646c6c00000000000000000000000000000000000000000000000000000000000000000000672800c000005fb21c4b634d61706933322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000746500e000008fb21c4b6353436172647333322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000293b00e00100a6b21c4b63537973496e697433322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000202000800400beb21c4b63457863657074696f6e33322e646c6c00000000000000000000000000000000000000000000000000000000000000000000202000c000008eb21c4b635570677261646533322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000002020001001008fb21c4b634d656d6f72792e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000736500b000004db21c4b537472696e6733322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000284c00f006004db21c4b52656d6f746533322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000a2000a006007fb21c4b615265676973746572436f6d2e646c6c000000000000000000000000000000000000000000000000000000000000000000000a0d0090020071b21c4b6142707053657475702e646c6c000000000000000000000000000000000000000000000000000000000000000000000000006e7400f0000075b21c4b63436c7243656e7465727333322e646c6c000000000000000000000000000000000000000000000000000000000000000000202000f00000bdb21c4b63436c725061727469636970616e747333322e646c6c000000000000000000000000000000000000000000000000000000006d2000f0000039b31c4b52656769737465722e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000206f00d0000040b21c4b61436f43727970742e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000074690080030080b31c4b61436f5075626c69632e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000697400d000004db21c4b61436f49734f776e2e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000292000a001007bb31c4b63436f436c724f626a656374732e646c6c0000000000000000000000000000000000000000000000000000000000000000002020006003001db31c4b63436f436c7245786368616e676546696c65732e646c6c0000000000000000000000000000000000000000000000000000004c6f001003002cb31c4b63436f436c72447269766572732e646c6c0000000000000000000000000000000000000000000000000000000000000000000d0a0000010032b31c4b63436f436c724472764d617374657242616e6b2e646c6c0000000000000000000000000000000000000000000000000000000a2000d003007cb31c4b63436f436c7244727656436172645472616e2e646c6c000000000000000000000000000000000000000000000000000000003b0d00e003003eb31c4b4974656d436f6e7461696e65722e646c6c000000000000000000000000000000000000000000000000000000000000000000a46300e000004cb21c4b63436f456e762e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000c79700a00300c9b21c4b61436f4f7074696f6e732e646c6c000000000000000000000000000000000000000000000000000000000000000000000000d2e00040060051b21c4b63436f4d61727368616c2e646c6c000000000000000000000000000000000000000000000000000000000000000000000000a3a400e0000067b21c4b63436f5374617475734c696e652e646c6c000000000000000000000000000000000000000000000000000000000000000000bc31008004007ab21c4b63436f43657274696669636174652e646c6c000000000000000000000000000000000000000000000000000000000000000099700000080095b21c4b65436f53444353657276657270732e646c6c000000000000000000000000000000000000000000000000000000000000000068af0018000041b21c4b63436f53706c6974576e642e646c6c000000000000000000000000000000000000000000000000000000000000000000000065020060070099b21c4b63436f53706c6974576e64322e646c6c000000000000000000000000000000000000000000000000000000000000000000000b29003009007eb31c4b63436f48656c702e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000abb600d0000067b21c4b65436f5369676e2e6578650000000000000000000000000000000000000000000000000000000000000000000000000000004ae700f003004bb21c4b65436f5344435365727665722e657865000000000000000000000000000000000000000000000000000000000000000000004fad00700a003cb21c4b4c6f676f2e626d70000000000000000000000000000000000000000000000000000000000000000000000000000000000000cceac88c010016bed27542616e6b33324c6f676f2e626d700000000000000000000000000000000000000000000000000000000000000000000000003225b6a40100205facbc7361747073736c2e646c6c000000000000000000000000000000000000000000000000000000000000000000000000000000dc1e00821300e4a4893d73736c2e73630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeb20090000614a47714163636f756e74696e6733322e65786500000000000000000000000000000000000000000000000000000000000000000000a9d40020010092b31c4b634163636e7433322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000c06f00c006001fb31c4b6342656e33322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000c27300c00200a8b21c4b6342494333322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000000000202d004002009eb21c4b63436c6163637333322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000560d0070070005b31c4b63436172647333322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000dada00b00300b0b21c4b63446570696e33322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000525d00d00000a8b21c4b634f7074696f6e7333322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000a72100d0040004b31c4b63526174657333322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000805b00100100a4b21c4b6343724c696e6533322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000006a1100b000008eb21c4b635472616e7333322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000b14700102f00e1b21c4b634163635365727633322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000a20600e00000a4b21c4b635072696e7433322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000327d00a00300b3b21c4b496e7465726f702e63436f436c72486f73742e646c6c0000000000000000000000000000000000000000000000000000000076d7000e000080b21c4b63546c784d616e61676533322e646c6c00000000000000000000000000000000000000000000000000000000000000000000d8fc00900e0004b31c4b635369676e5669657733322e646c6c000000000000000000000000000000000000000000000000000000000000000000000064d900500200a6b21c4b635472616e7348746d6c2e646c6c000000000000000000000000000000000000000000000000000000000000000000000000c6d100f00300c2b21c4b61436c725363686564756c65496e746572666163652e646c6c000000000000000000000000000000000000000000000000006ac90070000036b21c4b61436c725363686564756c65416e6e756974792e646c6c0000000000000000000000000000000000000000000000000000006dde0060000048b21c4b61436c725363686564756c654d616e75616c2e646c6c000000000000000000000000000000000000000000000000000000003432005000004ab21c4b61436c725363686564756c65506572696f646963616c2e646c6c00000000000000000000000000000000000000000000000075c0006000004db21c4b634163634d616e61676533322e646c6c000000000000000000000000000000000000000000000000000000000000000000003f5000e0640084b31c4b634e6577547265652e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000006ff900500600c2b21c4b496e7465726f702e4d53584d4c322e646c6c0000000000000000000000000000000000000000000000000000000000000000f0d200d002002fb21c4b496e7465726f702e5348446f6356772e646c6c00000000000000000000000000000000000000000000000000000000000000b48800000200b2c7e34763436f4372797374616c5265706f7274732e646c6c0000000000000000000000000000000000000000000000000000000000ccf400600c00a4b21c4b5653464c4558374c2e4f435800000000000000000000000000000000000000000000000000000000000000000000000000009872a865060069bfe93b63436f436c72486f73742e646c6c000000000000000000000000000000000000000000000000000000000000000000000000b64700a004005fb21c4b63436f4f70566965772e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000fff20060040073b31c4b46696e436f6e74726f6c732e646c6c0000000000000000000000000000000000000000000000000000000000000000000000132b00c00500d55feb4863436c7253706c69742e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000a57e0000030063b21c4b63436c7253706c69742e7265736f75726365732e72752e646c6c00000000000000000000000000000000000000000000000054820010000063b21c4b75326c6270702e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000078740082000087b31c4b65427070313032536c696365722e657865000000000000000000000000000000000000000000000000000000000000000000f70e0070070047b21c4b436c69656e7433322e6578650000000000000000000000000000000000000000000000000000000000000000000000000000a18100a0020091b31c4b634f7044617933322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000009e930010010001b31c4b634e6f6163637333322e646c6c000000000000000000000000000000000000000000000000000000000000000000000000003e9400a0070020b31c4b63436f72726333322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000b4aa00e0000031b31c4b634d6174757269747933322e646c6c00000000000000000000000000000000000000000000000000000000000000000000004d4300f000002bb31c4b63434564697433322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000937a00000200a2b21c4b634e4564697433322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000d4ab00700300ecb21c4b6357726f6e6733322e646c6c00000000000000000000000000000000000000000000000000000000000000000000000000005d5000a0020014b31c4b63436c724c69737433322e646c6c00000000000000000000000000000000000000000000000000000000000000000000");
      short expResult = 5840;
      short result = RPCPacket.fragLenFromRPCHeader(buffer);
      assertEquals(expResult, result);
   }

   private ByteArrayOutputStream prepareInputStream(String packet)
   {
      ByteArrayOutputStream resultsStream = new ByteArrayOutputStream();
      try
      {
         resultsStream.write(BinaryTCPClientImpl.hexStringToByteArray(packet));
      }
      catch (IOException ex)
      {
         Logger.getLogger(RPCPacketTest.class.getName()).log(Level.SEVERE, null, ex);
         fail(ex.getMessage());
      }
      return resultsStream;
   }

   /**
    *
    */
   @Test
   public void testGetPacketWithoutHeader()
   {
      System.out.println("getPacketWithoutHeader1");
      String packet = "05000c03100000003c00000001000000d016d016f76c4f0a05003230303000000100000000000000045d888aeb1cc9119fe808002b10486002000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      String expStr = "d016d016f76c4f0a05003230303000000100000000000000045d888aeb1cc9119fe808002b10486002000000";
      byte[] expResult = BinaryTCPClientImpl.hexStringToByteArray(expStr);
      byte[] result = null;
      try
      {
         result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
      }
      catch (RPCCallException ex)
      {
         fail(ex.getMessage());
      }
      assertArrayEquals(expResult, result);
   }

   /**
    *
    */
   @Test
   public void testGetPacketWithoutHeader_Response()
   {
      System.out.println("getPacketWithoutHeader2");
      String packet = "05000203100000005c08000003000000440800000000000000000000e07b37180d80ca010000000000000010080000000100000030312000fde784e023d2e1a000a64c315b37565a3c0053579703c03bbe4fb6b0c90051d00dcff284e6f6e652900000000000000000000000000000000000000000000000000000000000000000000000000ec23a900000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      String expStr = "00000000e07b37180d80ca010000000000000010080000000100000030312000fde784e023d2e1a000a64c315b37565a3c0053579703c03bbe4fb6b0c90051d00dcff284e6f6e652900000000000000000000000000000000000000000000000000000000000000000000000000ec23a900000000";
      byte[] expResult = BinaryTCPClientImpl.hexStringToByteArray(expStr);
      byte[] result = null;
      try
      {
         result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
      }
      catch (RPCCallException ex)
      {
         fail(ex.getMessage());
      }
      assertArrayEquals(expResult, result);
   }

   /*
   @Test
   public void testGetPacketWithoutHeader_Type0()
   {
      System.out.println("getPacketWithoutHeader2");
      String packet = "0500000310000000a4000000e20000008c0000000000020000000000000002006b000000000000006b000000cfeee4f2e2e5f0e4e8f2e520f0e0e7f0e5f8e5ede8e520e8e3edeef0e8f0eee2e0f2fc20eeeaeeedf7e0ede8e520f1f0eeeae020e4e5e9f1f2e2e8ff20e4eeeaf3ece5edf2e028efeee4efe8f1e82920efee20c1e0edeaf32fcaebe8e5edf2f3203c333530303030313e0030210000000f00000002000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      String expStr = "00000000e07b37180d80ca010000000000000010080000000100000030312000fde784e023d2e1a000a64c315b37565a3c0053579703c03bbe4fb6b0c90051d00dcff284e6f6e652900000000000000000000000000000000000000000000000000000000000000000000000000ec23a900000000";
      byte[] expResult = BinaryTCPClientImpl.hexStringToByteArray(expStr);
      byte[] result = null;
      try
      {
         result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
      }
      catch (RPCCallException ex)
      {
         fail(ex.getMessage());
      }
      assertArrayEquals(expResult, result);
   }
    * 
    */

   /**
    *
    */
   @Test
   public void testGetPacketWithoutHeader_Unsupported()
   {
      System.out.println("getPacketWithoutHeader_excp");
      String packet = "0500FF03100000005c08000003000000440800000000000000000000e07b37180d80ca010000000000000010080000000100000030312000fde784e023d2e1a000a64c315b37565a3c0053579703c03bbe4fb6b0c90051d00dcff284e6f6e652900000000000000000000000000000000000000000000000000000000000000000000000000ec23a900000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      try
      {
         byte[] result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
         fail("Exception expected");
      }
      catch (UnsupportedOperationException e)
      {
      }
      catch (RPCCallException ex)
      {
         fail(ex.getMessage());
      }
   }

   /**
    *
    */
   @Test
   public void testGetPacketWithoutHeader_BindNack()
   {
      System.out.println("getPacketWithoutHeader_excp");
      String packet = "05000d031000000018000000010000000400010500000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      try
      {
         byte[] result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
         fail("Exception expected");
      }
      catch (UnsupportedOperationException e)
      {
         fail(e.getMessage());
      }
      catch (RPCCallException ex)
      {
         assertEquals("BindNack received", ex.getMessage());
      }
   }

   /**
    *
    */
   @Test
   public void testGetPacketWithoutHeader_Fault()
   {
      System.out.println("getPacketWithoutHeader_excp");
      String packet = "05000d031000000018000000010000000400010500000000";
      ByteArrayOutputStream resultsStream = prepareInputStream(packet);

      try
      {
         byte[] result = RPCPacket.getPacketWithoutHeader(resultsStream.toByteArray());
         fail("Exception expected");
      }
      catch (UnsupportedOperationException e)
      {
         fail(e.getMessage());
      }
      catch (RPCCallException ex)
      {
         assertEquals("BindNack received", ex.getMessage());
      }
   }

   /**
    * Test of getPacketFlags method, of class RPCPacket.
    */
   @Test
   public void testGetPacketFlags()
   {
      System.out.println("getPacketFlags");
      String packet = "0500FF03100000005c08000003000000440800000000000000000000e07b37180d80ca010000000000000010080000000100000030312000fde784e023d2e1a000a64c315b37565a3c0053579703c03bbe4fb6b0c90051d00dcff284e6f6e652900000000000000000000000000000000000000000000000000000000000000000000000000ec23a900000000";
      byte[] toByteArray = BinaryTCPClientImpl.hexStringToByteArray(packet);
      byte expResult = 3;
      byte result = RPCPacket.getPacketFlags(toByteArray);
      assertEquals(expResult, result);
   }
}
